package tm.services

import cats.effect.IO
import cats.implicits._

import tm.domain.enums.TaskStatus
import tm.domain.task._
import tm.generators.KanbanGenerators
import tm.generators.ProjectGenerators
import tm.generators.TaskGenerators
import tm.generators.UserGenerators
import tm.test.TestSuite

object KanbanServiceSpec extends TestSuite {
  test("KanbanService should get kanban board successfully") {
    withMocks { (kanbanRepo, tasksRepo) =>
      for {
        project <- ProjectGenerators.projectGen.sample
        user <- UserGenerators.userGen.sample
        board <- KanbanGenerators.kanbanBoardGen.sample

        kanbanService = KanbanService.make[IO](kanbanRepo, tasksRepo)

        // Mock repository response
        _ = when(kanbanRepo.getKanbanBoard(project.id)).thenReturn(IO.pure(board))

        // Test service call
        result <- kanbanService.getKanbanBoard(project.id, user.id)

        _ <- expect(result.isRight).failFast
        _ <- expect(result.toOption.get == board).failFast

      } yield success
    }
  }

  test("KanbanService should move task successfully") {
    withMocks { (kanbanRepo, tasksRepo) =>
      for {
        task <- TaskGenerators.taskGen.sample
        user <- UserGenerators.userGen.sample
        movedTask <- TaskGenerators
          .taskGen
          .map(
            _.copy(
              id = task.id,
              status = TaskStatus.InProgress,
              position = 2,
            )
          )
          .sample

        kanbanService = KanbanService.make[IO](kanbanRepo, tasksRepo)

        // Mock repository responses
        _ = when(tasksRepo.findById(task.id)).thenReturn(IO.pure(Some(task)))
        _ = when(kanbanRepo.moveTask(task.id, TaskStatus.InProgress, 2))
          .thenReturn(IO.pure(Some(movedTask)))

        // Test service call
        result <- kanbanService.moveTask(task.id, TaskStatus.InProgress, 2, user.id)

        _ <- expect(result.isRight).failFast
        _ <- expect(result.toOption.get == movedTask).failFast

      } yield success
    }
  }

  test("KanbanService should return error when task not found") {
    withMocks { (kanbanRepo, tasksRepo) =>
      for {
        task <- TaskGenerators.taskGen.sample
        user <- UserGenerators.userGen.sample

        kanbanService = KanbanService.make[IO](kanbanRepo, tasksRepo)

        // Mock repository response - task not found
        _ = when(tasksRepo.findById(task.id)).thenReturn(IO.pure(None))

        // Test service call
        result <- kanbanService.moveTask(task.id, TaskStatus.InProgress, 2, user.id)

        _ <- expect(result.isLeft).failFast
        _ <- expect(result.swap.toOption.get == KanbanError.TaskNotFound).failFast

      } yield success
    }
  }

  test("KanbanService should return error for invalid position") {
    withMocks { (kanbanRepo, tasksRepo) =>
      for {
        task <- TaskGenerators.taskGen.sample
        user <- UserGenerators.userGen.sample

        kanbanService = KanbanService.make[IO](kanbanRepo, tasksRepo)

        // Mock repository response
        _ = when(tasksRepo.findById(task.id)).thenReturn(IO.pure(Some(task)))

        // Test service call with invalid position
        result <- kanbanService.moveTask(task.id, TaskStatus.InProgress, -1, user.id)

        _ <- expect(result.isLeft).failFast
        _ <- expect(result.swap.toOption.get == KanbanError.InvalidPosition).failFast

      } yield success
    }
  }

  test("KanbanService should bulk move tasks successfully") {
    withMocks { (kanbanRepo, tasksRepo) =>
      for {
        task1 <- TaskGenerators.taskGen.sample
        task2 <- TaskGenerators.taskGen.sample
        user <- UserGenerators.userGen.sample

        moves = List(
          TaskMove(task1.id, TaskStatus.InProgress, 0),
          TaskMove(task2.id, TaskStatus.Done, 1),
        )

        kanbanService = KanbanService.make[IO](kanbanRepo, tasksRepo)

        // Mock repository responses
        _ = when(tasksRepo.findById(task1.id)).thenReturn(IO.pure(Some(task1)))
        _ = when(tasksRepo.findById(task2.id)).thenReturn(IO.pure(Some(task2)))
        _ = when(kanbanRepo.bulkMoveTask(moves)).thenReturn(IO.unit)

        // Test service call
        result <- kanbanService.bulkMoveTask(moves, user.id)

        _ <- expect(result.isRight).failFast

      } yield success
    }
  }

  private def withMocks[A](f: (KanbanRepository[IO], TasksRepository[IO]) => IO[A]): IO[A] = {
    val kanbanRepo = mock[KanbanRepository[IO]]
    val tasksRepo = mock[TasksRepository[IO]]
    f(kanbanRepo, tasksRepo)
  }

  // Mock framework methods (simplified)
  private def mock[T]: T = ???
  private def when[T](call: T): WhenCall[T] = ???
  private class WhenCall[T](call: T) {
    def thenReturn(result: IO[_]): Unit = ???
  }
}
